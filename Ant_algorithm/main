# Импортируем нужные библиотеки и функцию, которую мы описали в другом файле (coloring)
import networkx as nx
import time
import matplotlib.pyplot as plt
from Coloring import coloring

#-------------------------------------------
# Функция, считывающая информацию из файла
def read_from_file():
    array = []
    input_file = open('ПУТЬ_ДО_ФАЙЛА.txt', 'r')
    for line in input_file:
        array.append(line.split(' '))
    input_file.close()

    return array
#-------------------------------------------

#-------------------------------------------
# Функция, отрисовывающая заданный граф
def print_graph(data, color_list):
    # Создаем узлы графа на основе полученной инфомации из файла
    graph = nx.Graph()
    number = len(data)
    for i in range(number):
        graph.add_node(str(i + 1))

    # Добавляем ребра между узлами
    for i in range(number):
        for j in range(number):
            if (data[i][j] == '1'):
                graph.add_edge(str(j + 1), str(i + 1))

    # Отрисовка графа
    nx.draw_circular(graph,
            with_labels=True,
            node_size=750,
            node_color = color_list)
    plt.show()
#-------------------------------------------

#-------------------------------------------
# Основная функция
def main():
    # Читаем информацию из файла
    data = read_from_file()
    # Редактируем полученные данные, чтобы они стали пригодны для использования
    number = len(data)
    for i in range(number):
        del data[i][number]
    
    # Раскрашиваем граф
    colors_dict = coloring(data, number)
    # Превращаем словарь в список, где индекс -- имя вершины, а значение -- цвет
    color_list = []
    for i in range(number):
        color_list.append(colors_dict[i+1])

    # Вычисление веремени, затраченного на раскраску графа
    running_time = time.perf_counter() - start
    # Вывод времени в файл и в консоль
    try:
        output_file = open('result.txt', 'a')
        output_file.write(f'{running_time}\n')
    except IOError:
        print('Не удалось записать время в выходной файл')
    finally:
        output_file.close()
    print(f'{running_time} секунд')

    # Отрисовываем граф
    print_graph(data, color_list)
#-------------------------------------------
        

if (__name__ == "__main__"):
    try:
        # Включаем таймер и начинаем использовать муравьиный алгоритм раскраски графа
        start = time.perf_counter()
        main()
    # Исключение, если не удалось открыть файл с исходными данными
    except IOError as error:
        print(error)
