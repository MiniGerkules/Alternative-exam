# Импортируем нужные библиотеки
import time
import networkx as nx
import matplotlib.pyplot as plt

#-------------------------------------------
# Функция, считывающая информацию из файла
def read_from_file():
    array = []
    input_file = open('ПУТЬ_ДО_ФАЙЛА.txt', 'r')
    for line in input_file:
        array.append(line.split(' '))
    input_file.close()

    return array
#-------------------------------------------

#-------------------------------------------
# Функция, вычисляющая степень вершины графа
# data -- матрица смежности графа
# elem -- столбец, по которому мы идем
# number -- число вершин в графе
def degree(data, elem, number):
    answer = 0
    for i in range(number):
        if (data[i][elem] == '1'):
            answer += 1
    
    return answer
#-------------------------------------------

#-------------------------------------------
# Функция, проверяющая является ли вершина смежной с уже покрашенными
# data -- матрица смежности графа
# number -- число вершин в графе
# color_of_nodes -- словарь, в котором ключ -- имя вершины, а значение -- ее цвет
# current_color -- текущий цвет
# j -- столбец, в котором проверяем смежность раскрашиваемой вершины с k-ой
def is_adjacent(data, number, color_of_nodes, current_color, j):
    answer = False
    k = 0
    # Идем по столбцу матрицы смежности
    while (k < number):
        # Если вершины связаны и связанная вершина уже покрашена в текущий цвет, значит текущую вершину нельзя красить в этот цвет
        if ((data[k][j] == '1') and (str(k + 1) in color_of_nodes) and (color_of_nodes[str(k + 1)] == current_color)):
            answer = True
            k = number
        k += 1
    return answer
#-------------------------------------------

#-------------------------------------------
# Основная функция
def main():
    # Читаем информацию из файла
    data = read_from_file()
    # Редактируем полученные данные, чтобы они стали пригодны для использования
    number = len(data)
    for i in range(number):
        del data[i][number]

    # Создаем узлы графа на основе полученной инфомации из файла
    graph = nx.Graph()
    for i in range(number):
        graph.add_node(str(i+1))

    # Добавляем ребра между узлами
    for i in range(number):
        for j in range(number):
            if (data[i][j] == '1'):
                graph.add_edge(str(j+1), str(i+1))

    # Добавляем вершины графа в двумерный список, где у одномерных списков первый элемент -- имя вершины, второй элемент -- степень вершины
    degs_of_nodes = [0] * number
    for i in range(number):
        degs_of_nodes[i] = [(i+1), degree(data, i, number)]

    # Сортируем вершины в порядке невозрастания степени    
    degs_of_nodes.sort(key=lambda i: i[1], reverse = True)      # Сортируем по степеням вершин
    color_of_nodes = {}     # Словарь цветов и вершин
    current_color = 1       # Текущий цвет

    # Пока в списке есть необработанные вершины
    size = len(degs_of_nodes)
    while (size != 0):
        # Инициализируем цветом первую вершину (degs_of_nodes[0][0] -- имя вершины, имеющей максимальную степень)
        color_of_nodes[str(degs_of_nodes[0][0])] = current_color
        # Идем по строке связей текущей вершины
        for j in range(number):
            # Если нет связующего ребра между вершинами, и мы еще не покрасили эту вершину, 
            # а также эта вершина не смежна с уже покрашенными в current_color вершинами, красим вершину в выбранный цвет
            if ((data[degs_of_nodes[0][0] - 1][j] == '0') and (not(str(j+1) in color_of_nodes)) and (not(is_adjacent(data, number, color_of_nodes, current_color, j)))):
                color_of_nodes[str(j+1)] = current_color
                # Ищем и удаляем только что покрашенную вершину из списка непокрашенных вершин
                i = 0
                while (i < size):
                    if (degs_of_nodes[i][0] == (j+1)):
                        del degs_of_nodes[i]
                        size -= 1
                        i = size
                    i += 1
        # Переходим к следующему цвету и удаляем первый покрашенный элемент
        current_color += 1
        del degs_of_nodes[0]
        size -= 1

    # Вычисление веремени, затраченного на раскраску графа
    running_time = time.perf_counter() - start
    # Вывод времени в файл и в консоль
    try:
        output_file = open('result.txt', 'a')
        output_file.write(f'{running_time}\n')
    except IOError:
        print('Не удалось записать время в выходной файл')
    finally:
        output_file.close()
    print(f'{running_time} секунд')

    # Превращаем словарь в список, где индекс -- имя вершины, а значение -- цвет
    color_list = []
    for i in range(number):
        color_list.append(color_of_nodes[str(i+1)])

    # Отрисовка графа
    nx.draw_circular(graph,
            with_labels=True,
            node_size=750,
            node_color = color_list)
    plt.show()
#-------------------------------------------

# Вызываем главную функцию
if (__name__ == "__main__"):
    try:
        # Включаем таймер и начинаем использовать алгоритм последовательной раскраски
        start = time.perf_counter()
        main()
    # Исключение, если не удалось открыть файл с исходными данными
    except IOError as error:
        print(error)
